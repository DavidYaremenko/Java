package Polimorfizm;

public class Polimorfizm {

	public static void main(String[] args) {
		// Полиморфизм - способность метода обрабатывать данные разного типа. Польза: код можно сделать меньше и многоразово
		
		/* Animal animal = new Animal();
		 Dog dog = new Dog();
		 
		 animal.eat();
		 dog.eat(); // из за наследования класс Dog принимает метод из класса Animal даже без написания
		 */
//-------------------------------------------------------------------------------------------------------------------------------
		/*Animal animal = new Dog(); // к обьекту класса Dog ми можем обращаться через переменную родителя(от кого наследуется), но есть ограничения(см ниже)
		Dog dog = new Dog();
		
		animal.bark(); // к методам, которые относятся только к классу Dog мы не можем обратиться через переменную родителя
		dog.bark();
		*/
//----------------------------------------------------------------------------------------------------------------------------------
		/*	Animal animal = new Dog(); // Upcasting - Восходящее преобразование // но в таком случае, если в классе Dog переопредилили метод eat, то если обратиться к обьекту класса Dog через переменную родителя тогда метод сработает из за переопределения и ВСЕГДА ВИВОДИТЬСЯ МЕТОД КОТОРІЙ НАПИСАН В КЛАССЕ(ПОТОМКЕ)
		animal.eat(); //создавая обьект класса ДОГ на родительском классе и вызвав метод ЕСТЬ, выведет переопределенный метод в классе ДОГ - это называется ПОЗДНЕЕ СВЯЗЫВАНИЕ
		*/
		Animal animal = new Animal();
		Dog dog = new Dog();
		Cat cat = new Cat();
		
		test(animal);
		test(dog); // благодаря полиморфизму мы можем вызывать данный метод на всех классах которые наледовали класс Анимал
		test(cat);
	}
	
	public static void test(Animal animal) { // создали метод и передали в аргумент(Animal animal) родителя, вызвав на нем метод eat, что позволит в следующем через метод обращаться к переменным классов 
		animal.eat(); // все потомки передаются в этот метод
	}

}
