package Queue_interface;

import java.util.LinkedList;
import java.util.Queue;

public class Queue_LinkedList { // Queue - коллекция, которыая хранит последовательность элементов для
								// какой либо обработке.Используется для того, чтобы проводить операции с самым
								// первым в очереди елементом. Правило FIFO - первый кто зашел в очередь, тот
								// первый и выйдет.

	public static void main(String[] args) { // Класс linkedList имплементирует не только интерфейс List, но и интерфейс
												// Deque.

		Queue<String> q = new LinkedList<>();

		q.add("John"); // add добавляет елемент в конец очереди
		q.offer("Bella");// есть еще метод offer - тоже добавляет елементы, но в ограниченную очередь
							// если мы ее укажем. И если есть ограниченная очередь - лучше использовать
							// offer для избежания ошибка, в лучае если захотим добавить елемент в очередь
							// которая пуста, то он просто не добавиться и ошибки не будет.
		q.add("Lili");
		q.add("Brad");
		q.add("Weeck");

		System.out.println(q);

		System.out.println(q.remove()); // remove возвращает удаленный елемент. И удаляет первый елемент в очереди
		System.out.println(q);
		System.out.println(q.poll()); // poll метод так же удаляет, но в случае если мы хотим удалить елемент 6, когда
										// у нас в очереди их 5 - он не выдаст ошибку как это сделает remove, он просто
										// выведет null

		System.out.println(q.element()); // element выводит первый елемент в очереди
		System.out.println(q.peek()); // так же выводит первый елемент в очереди, но если очередь уже пуста, а мы
										// пробуем вывести елемент - он не выдаст ошибку как это сделал бы метод
										// element, он просто вернет null

		System.out.println(q.remove("Brad")); // мы можем удалять в середине очереди елементы, но тогда нет смысла
												// использовать Queue, можно брать другую коллекцтю, потому что ее суть
												// в работе именно с первым елементом

	}

}
